# Generated from python.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,143,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,5,0,42,8,0,10,0,12,0,45,9,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
        4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,4,14,78,8,14,11,14,12,14,79,1,
        15,5,15,83,8,15,10,15,12,15,86,9,15,1,15,1,15,4,15,90,8,15,11,15,
        12,15,91,1,15,4,15,95,8,15,11,15,12,15,96,1,15,1,15,5,15,101,8,15,
        10,15,12,15,104,9,15,3,15,106,8,15,1,16,1,16,5,16,110,8,16,10,16,
        12,16,113,9,16,1,16,1,16,1,16,5,16,118,8,16,10,16,12,16,121,9,16,
        1,16,3,16,124,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,135,8,17,1,18,4,18,138,8,18,11,18,12,18,139,1,18,1,18,0,0,19,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,1,0,6,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,34,34,1,0,39,39,3,0,9,
        10,13,13,32,32,154,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,1,39,1,0,0,0,3,46,1,0,0,0,5,48,1,0,0,0,7,51,1,0,0,0,9,54,1,0,0,
        0,11,57,1,0,0,0,13,60,1,0,0,0,15,62,1,0,0,0,17,64,1,0,0,0,19,66,
        1,0,0,0,21,68,1,0,0,0,23,70,1,0,0,0,25,72,1,0,0,0,27,74,1,0,0,0,
        29,77,1,0,0,0,31,105,1,0,0,0,33,123,1,0,0,0,35,134,1,0,0,0,37,137,
        1,0,0,0,39,43,7,0,0,0,40,42,7,1,0,0,41,40,1,0,0,0,42,45,1,0,0,0,
        43,41,1,0,0,0,43,44,1,0,0,0,44,2,1,0,0,0,45,43,1,0,0,0,46,47,5,61,
        0,0,47,4,1,0,0,0,48,49,5,43,0,0,49,50,5,61,0,0,50,6,1,0,0,0,51,52,
        5,45,0,0,52,53,5,61,0,0,53,8,1,0,0,0,54,55,5,42,0,0,55,56,5,61,0,
        0,56,10,1,0,0,0,57,58,5,47,0,0,58,59,5,61,0,0,59,12,1,0,0,0,60,61,
        5,43,0,0,61,14,1,0,0,0,62,63,5,45,0,0,63,16,1,0,0,0,64,65,5,42,0,
        0,65,18,1,0,0,0,66,67,5,47,0,0,67,20,1,0,0,0,68,69,5,37,0,0,69,22,
        1,0,0,0,70,71,5,44,0,0,71,24,1,0,0,0,72,73,5,91,0,0,73,26,1,0,0,
        0,74,75,5,93,0,0,75,28,1,0,0,0,76,78,7,2,0,0,77,76,1,0,0,0,78,79,
        1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,30,1,0,0,0,81,83,7,2,0,0,
        82,81,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,87,1,
        0,0,0,86,84,1,0,0,0,87,89,5,46,0,0,88,90,7,2,0,0,89,88,1,0,0,0,90,
        91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,106,1,0,0,0,93,95,7,2,
        0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,98,
        1,0,0,0,98,102,5,46,0,0,99,101,7,2,0,0,100,99,1,0,0,0,101,104,1,
        0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,106,1,0,0,0,104,102,1,
        0,0,0,105,84,1,0,0,0,105,94,1,0,0,0,106,32,1,0,0,0,107,111,5,34,
        0,0,108,110,8,3,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,
        0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,124,5,34,
        0,0,115,119,5,39,0,0,116,118,8,4,0,0,117,116,1,0,0,0,118,121,1,0,
        0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,0,121,119,1,0,
        0,0,122,124,5,39,0,0,123,107,1,0,0,0,123,115,1,0,0,0,124,34,1,0,
        0,0,125,126,5,84,0,0,126,127,5,114,0,0,127,128,5,117,0,0,128,135,
        5,101,0,0,129,130,5,70,0,0,130,131,5,97,0,0,131,132,5,108,0,0,132,
        133,5,115,0,0,133,135,5,101,0,0,134,125,1,0,0,0,134,129,1,0,0,0,
        135,36,1,0,0,0,136,138,7,5,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,
        137,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,6,18,0,0,142,
        38,1,0,0,0,13,0,43,79,84,91,96,102,105,111,119,123,134,139,1,6,0,
        0
    ]

class pythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VARNAME = 1
    EQUAL = 2
    PLUSEQUAL = 3
    MINUSEQUAL = 4
    MULTIPLYEQUAL = 5
    DIVIDEEQUAL = 6
    PLUS = 7
    MINUS = 8
    MULTIPLY = 9
    DIVIDE = 10
    MOD = 11
    COMMA = 12
    LBRACKET = 13
    RBRACKET = 14
    INT = 15
    FLOAT = 16
    STRING = 17
    BOOLEAN = 18
    WHITESPACE = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+='", "'-='", "'*='", "'/='", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "','", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "VARNAME", "EQUAL", "PLUSEQUAL", "MINUSEQUAL", "MULTIPLYEQUAL", 
            "DIVIDEEQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", 
            "COMMA", "LBRACKET", "RBRACKET", "INT", "FLOAT", "STRING", "BOOLEAN", 
            "WHITESPACE" ]

    ruleNames = [ "VARNAME", "EQUAL", "PLUSEQUAL", "MINUSEQUAL", "MULTIPLYEQUAL", 
                  "DIVIDEEQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "MOD", "COMMA", "LBRACKET", "RBRACKET", "INT", "FLOAT", 
                  "STRING", "BOOLEAN", "WHITESPACE" ]

    grammarFileName = "python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


